source("utils.R")
####
df = fread(paste0(data.dir,"/train.csv")) %>% as.data.frame()
test = fread(paste0(data.dir,"/test.csv")) %>% as.data.frame()
# policy = fread(paste0(data.dir,"/policy_data.csv")) %>% as.data.frame()
# payment = fread(paste0(data.dir,"/payment_history.csv")) %>% as.data.frame()
# m = setdiff(df$State,test$State)
# m2 = setdiff(df$LGA_Name,test$LGA_Name)
# m3 = setdiff(df$Car_Category,test$Car_Category)
#
# df = df %>% filter(!State %in% m) %>%
#   filter(!LGA_Name %in% m2) %>% filter(!Car_Category %in% m3)
train.id = df$ID
test.id = samp$ID
Store(train.id)
Store(test.id)
label = df$target
Store(label)
df = bind_rows(df %>% select(-c(target)),test)
a = cyclic_encoding(df$`Policy Start Date`,c("day","quarter"))
colnames(a) = paste0("Policy_Start_",colnames(a))
# a2 = cyclic_encoding(df$`Policy End Date`,c("quarter"))
# colnames(a2) = paste0("Policy_End_",colnames(a2))
df = df %>%
mutate(
# ID = sapply(ID,map.func),
ID = NULL,
nextm = `First Transaction Date` + 90,
tenor = as.numeric(`Policy End Date` - `Policy Start Date`),
tenor = ifelse(tenor>3650,3650,tenor),
Age = ifelse(Age<0,0,ifelse(Age>120,120,Age)),
age_en = freq.encode(Age),
#  Subject_Car_Make = ifelse(Subject_Car_Make %in% c("."),"",Subject_Car_Make),
# Car_Category=ifelse(Car_Category %in% c("Mini Bus"),"Bus",
#   ifelse(Car_Category %in% c('Van','Mini Van'),"Van",
# ifelse(Car_Category %in% c("Sedan",'CAMRY CAR HIRE'),"Saloon",
#  ifelse(Car_Category %in% 'Station 4 Wheel',"Wagon",
#   ifelse(Car_Category == "Tipper Truck",'Truck',
#    ifelse(Car_Category == 'Pick Up > 3 Tons','Pick Up',Car_Category)))))),
# Car_Category = ifelse(Car_Category =="" & ProductName =='Motor Cycle',"Motorcycle",Car_Category),
# prd = ifelse(ProductName == "Muuve",1,
#  # ifelse(ProductName %in% c('Car Classic','Car Plus','CarFlex'),2,
#     ifelse(ProductName == 'CVTP',1,
#       ifelse(ProductName == "Motot Cycle",1,0))),
#  age2 = round_any(Age,10),
# age_grp = sapply(Age,group_age),
#start_year = year(ymd(`Policy Start Date`)),
start_month = month(ymd(`Policy Start Date`)),
start_qrs = quarter(ymd(`Policy Start Date`)),
start_day = day(ymd(`Policy Start Date`)),
start_day_en = freq.encode(start_day),
start_week = week(ymd(`Policy Start Date`)),
start_weekday = wday(ymd(`Policy Start Date`)),
#start_weekend = ifelse(start_weekday>5,1,0),
# year_day = yday(ymd(`Policy Start Date`)),
#  year_day_sin = sin(start_qrs *(2 * pi /4)),
# year_day_cos = cos(start_qrs *(2 * pi /4)),
#  end_year = year(ymd(`Policy End Date`)),
end_month = month(ymd(`Policy End Date`)),
end_qrs = quarter(ymd(`Policy End Date`)),
end_day = day(ymd(`Policy End Date`)),
end_weekday = wday(ymd(`Policy End Date`)),
end_week = week(ymd(`Policy End Date`))
#  end_yday = yday(ymd(`Policy End Date`))
#  prod_en =freq.encode(ProductName)
# tran_year = year(ymd(`First Transaction Date`)),
# tran_month = month(ymd(nextm)),
# tran_qtrs = quarter(ymd(nextm)),
# tran_day = day(ymd(nextm)),
# tran_week = week(ymd(nextm)),
# tran_weekday = wday(ymd(nextm))
#Days_since_lasttran=as.numeric(Sys.Date()-`First Transaction Date`)
# Gender = ifelse(Gender =="Male",1,ifelse(Gender=="Female",2,0)),
#  Car_Category = as.numeric(as.factor(Car_Category)),
# Subject_Car_Colour = as.numeric(as.factor(Subject_Car_Colour)),
#  Subject_Car_Make = as.numeric(as.factor(Subject_Car_Make)),
# LGA_Name = as.numeric(as.factor(LGA_Name)),
#  State = as.numeric(as.factor(State)),
# ProductName = as.numeric(as.factor(ProductName))
) %>%
select(-c(`Policy Start Date`,`Policy End Date`,`First Transaction Date`,nextm))
########
##
#######
#### POLICY
policy = df%>%
group_by(ProductName) %>%
summarise(pol_cnt = n(),
prod_cnt= length(unique(No_Pol)),
# prod_cnt2= sum(length(unique(PPR_PRODCD))),
mean_premium = mean(Age,na.rm = T),
min_premium = min(Age,na.rm = T),
mean_pr = mean(No_Pol,na.rm = T),
#min_prr = min(No_Pol,na.rm = T),
# mean_day = mean(start_day,na.rm = T),
#mean_day = mean(start_day,na.rm = T),
#date_cnt = length(unique(NP2_EFFECTDATE)),
#principal_cnt = length(unique(No_Pol>=6)),
# prod_64QNIHM = sum(unique(PPR_PRODCD == "PPR_PRODCD_64QNIHM")),
# sum_prem = sum(NPR_PREMIUM,na.rm = T),
family = length(unique(Car_Category)),
# family2 = mean(as.numeric(as.factor(Subject_Car_Make))),
#fa = mean(as.numeric(as.factor(Car_Category))),
# amount = mean(NLO_AMOUNT,na.rm = T),
location = length(unique(State)),
# location2 = length(unique(LGA_Name)),
#category = max(CATEGORY),
min_pr = min(tenor,na.rm = T),
min_prem = mean(tenor,na.rm = T))
#type_cnt = sum(length(unique(NLO_TYPE))),
#        occupation = max(OCCUPATION)) %>%
# mutate(location = as.numeric(as.factor(location)),
#        #category = as.numeric(as.factor(category)),
#        agent= as.numeric(as.factor(agent)),
#        type = as.numeric(as.factor(type)),
#        #occupation = as.numeric(as.factor(occupation)),
#        en = freq.encode(location))
# policy2 = df%>%
#   group_by(nn) %>%
#   summarise(
#     # prod_cnt2= sum(length(unique(PPR_PRODCD))),
#     mean_premiumc = mean(Age,na.rm = T),
#    # min_premiumc = min(Age,na.rm = T),
#    # mean_prc = mean(No_Pol,na.rm = T),
#     #location = length(unique(State)),
#     min_prc = min(tenor,na.rm = T),
#     min_premc = mean(tenor,na.rm = T))
df =df %>% left_join(policy) %>% #left_join(policy2,by="No_Pol") %>%
mutate(Gender = ifelse(Gender =="Male",1,ifelse(Gender=="Female",2,0)),
Car_Category = as.numeric(as.factor(Car_Category)),
# test = ifelse(Age==120 & No_Pol ==4 & start_month ==1 & start_day==1,1,0),
# car_en = freq.encode(Car_Category),
Subject_Car_Colour = as.numeric(as.factor(Subject_Car_Colour)),
Subject_Car_Make = as.numeric(as.factor(Subject_Car_Make)),
#sub_en = freq.encode(Subject_Car_Make),
LGA_Name = as.numeric(as.factor(LGA_Name)),
#lga_en = freq.encode(LGA_Name),
State = as.numeric(as.factor(State)),
ProductName = as.numeric(as.factor(ProductName))) %>%
#add_count(Age) %>% rename(age_cnt = n) %>%
add_count(Age,ProductName) %>% rename(age_prd_cnt = n)
#df$nn2 = my.f2cnt(df,"ProductName","Car_Category")
#a = calc_entropy(df,"ProductName","No_Pol","prd_p")
df$nn = df$No_Pol + df$ProductName
df = df %>% left_join(m)
df = cbind(df,a)
df_train = df[1:length(train.id),]
df_test = df[(length(train.id)+1):nrow(df),]
df_train$rms=NULL
devresult = rep(0,nrow(df_train))
predte = rep(0,nrow(df_test))
cvscore = c()
int.seed = c(100)
for (i in 1:length(int.seed)) {
cat("model training",i,"\n")
set.seed(int.seed[i])
folds = createFolds(label, k = 5)
for (this.round in 1:length(folds)) {
cat("model training",i," ","fold ",this.round,"\n")
valid = c(1:length(label2))[unlist(folds[this.round])]
dev = c(1:length(label2))[unlist(folds[1:length(folds)!= this.round])]
dtrain<- xgb.DMatrix(data= as.matrix(df_train[dev,]), label= label2[dev])
dvalid <- xgb.DMatrix(data= as.matrix(df_train[valid,]),label=label2[valid])
valids <- list(val = dvalid)
param = list(booster = "gbtree",
objective = "binary:logistic",#"reg:gamma",
eval_metric = "auc",
eta = 0.1,
colsample_bytree = 0.8,
max_depth = 10,
min_child_weight = 1,
scale_pos_weight = 5,
#num_parallel_tree = 2,
nthread = 8,
#base_score = mean(label),
#gamma = 0,
subsample = 0.8
)
model<- xgb.train(data = dtrain,
params= param,
#feval = eval_F1Score,
nrounds = 1200,
verbose = T,
# list(val = dvalid) ,
# early_stopping_rounds = 500,
print_every_n = 500,
maximize = T
)
pred = predict(model,as.matrix(df_train[valid,]))
devresult[valid] = pred
pred_test = predict(model, as.matrix(df_test[,colnames(df_train)]))
predte = predte + pred_test
}
}
#
#
# bagpred_test = matrix(0,nrow = nrow(df_test), ncol = 3)
# int.seed = c(500,1235,101)
# for (i in 1:length(int.seed)) {
#   cat("model training",i,"\n")
#   j = c(1,1.05,1.02)
# set.seed(int.seed[i])
# mod.xgb = xgb.train(data = dtrain, params = param,
#                     nrounds = round(1000*j[i]),
#                     print_every_n = 500)
#
# bagpred_test[,i] = predict(mod.xgb,newdata = dtest)
#
# }
#
#
threshold_search <- function(act, pred) {
best_threshold <- 0
best_score <- 0
for (threshold in seq(0.1, 0.99, 0.005)) {
score = ModelMetrics::f1Score(act, as.integer(pred > threshold))
if (score > best_score) {
best_threshold <- threshold
best_score <- score
}
}
list(threshold = best_threshold, f1 = best_score)
}
threshold <- threshold_search(label,devresult)
cat("Optimal threshold:", threshold$threshold, "\tscore:", threshold$f1)
pred = predte/5
pred= ifelse(pred>0.45,1,0)
summary(as.factor(pred))
sub = data.table(test.id,pred)
colnames(sub) = colnames(samp)
fwrite(sub,file = paste0(subm.dir,"/subm.csv"),row.names = F)
pred = predte/5
pred= ifelse(pred>0.5,1,0)
summary(as.factor(pred))
sub = data.table(test.id,pred)
colnames(sub) = colnames(samp)
fwrite(sub,file = paste0(subm.dir,"/subm.csv"),row.names = F)
pred = predte/5
pred= ifelse(pred>0.4,1,0)
summary(as.factor(pred))
sub = data.table(test.id,pred)
colnames(sub) = colnames(samp)
fwrite(sub,file = paste0(subm.dir,"/subm_lgb.csv"),row.names = F)
options(warn = -1)
library(lightgbm)
library(plyr)
library(tidyverse)
library(caret)
library(SOAR)
library(data.table)
library(lubridate)
#####
path.dir = getwd()
data.dir = paste0(path.dir,"/Data")
#dir.create(paste0(path.dir,"/subm"))
save.files.dir = paste0(path.dir,"/tmp")
subm.dir = paste0(path.dir,"/subm")
source("utils.R")
str(dftr)
str(df_train)
df_train$nn=NULL
df_train$label = label
library(magrittr)
library(fastai)
dep_var = 'label'
df_train$ID=NULL
colnames(df_train)
dim(df_train)
dim(df_test)
df_test = df_test[,colnames(df_train)]
procs = list(FillMissing(),Categorify(),Normalize())
dls = TabularDataTable(df_train, procs, cont_names,cat_names,
y_names = dep_var, splits = list(c(1:9000),c(9001:12079))) %>%
dataloaders(bs = 64)
cat_names = c('Car_Category','Subject_Car_Colour','Subject_Car_Make','LGA_Name','State','ProductName')
cont_names = colnames(df_train)[-c(4:9)]
procs = list(FillMissing(),Categorify(),Normalize())
dls = TabularDataTable(df_train, procs, cont_names,cat_names,
y_names = dep_var, splits = list(c(1:9000),c(9001:12079))) %>%
dataloaders(bs = 64)
model = dls %>% tabular_learner(layers=c(200,100), metrics=F1-score)
model = dls %>% tabular_learner(layers=c(200,100), metrics=F1)
model = dls %>% tabular_learner(layers=c(200,100), metrics=F1Score)
model %>% summary()
model %>% lr_find()
model %>% fit(5, lr = 0.0301,lr_steep = 0.0331)
model %>% fit(5, lr = 0.0301)
model %>% fit(5, lr = 0.03)
model %>% fit(5, lr = 10^1)
str(df_train)
model = dls %>% tabular_learner(layers=c(200,100), metrics=F1Score)
model
model %>% plot_lr_find(dpi = 200)
model %>% lr_find()
model %>% plot_lr_find(dpi = 200)
model %>% fit(5, lr = 0.01)
model %>% fit(5, lr = as.integer(0.01))
cont_names
colnames(df_train)
cat_names = c('Car_Category','Subject_Car_Colour','Subject_Car_Make','LGA_Name','State','ProductName')
cont_names = colnames(df_train)[-c(4:9,33)]
procs = list(FillMissing(),Categorify(),Normalize())
dls = TabularDataTable(df_train, procs, cont_names,cat_names,
y_names = dep_var, splits = list(c(1:9000),c(9001:12079))) %>%
dataloaders(bs = 64)
model = dls %>% tabular_learner(layers=c(200,100), metrics=F1Score)
model %>% summary()
model %>% lr_find()
model %>% fit(5, lr = 0.01)
str(df_train)
dls
dls$dataset
model$cpu
model %>% fit(2, lr = 0.01)
model %>% fastai::fit(5, lr = 0.01)
best.features
df_train = df_train
dls = TabularDataTable(df_train, procs, cont_names,cat_names,
y_names = dep_var, splits = list(c(1:9000),c(9001:12079))) %>%
dataloaders(bs = 64)
model = dls %>% tabular_learner(layers=c(200,100), metrics=F1Score)
model %>% fastai::fit(5, lr = 0.01)
model = dls %>% tabular_learner(layers=c(200,100), metrics=accuracy)
model %>% fastai::fit(5, lr = 0.01)
colnames(df_train)
####
df = fread(paste0(data.dir,"/train.csv")) %>% as.data.frame()
test = fread(paste0(data.dir,"/test.csv")) %>% as.data.frame()
# policy = fread(paste0(data.dir,"/policy_data.csv")) %>% as.data.frame()
# payment = fread(paste0(data.dir,"/payment_history.csv")) %>% as.data.frame()
# m = setdiff(df$State,test$State)
# m2 = setdiff(df$LGA_Name,test$LGA_Name)
# m3 = setdiff(df$Car_Category,test$Car_Category)
#
# df = df %>% filter(!State %in% m) %>%
#   filter(!LGA_Name %in% m2) %>% filter(!Car_Category %in% m3)
train.id = df$ID
test.id = samp$ID
Store(train.id)
Store(test.id)
label = df$target
Store(label)
df = bind_rows(df %>% select(-c(target)),test)
a = cyclic_encoding(df$`Policy Start Date`,c("day","quarter"))
colnames(a) = paste0("Policy_Start_",colnames(a))
# a2 = cyclic_encoding(df$`Policy End Date`,c("quarter"))
# colnames(a2) = paste0("Policy_End_",colnames(a2))
df = df %>%
mutate(
# ID = sapply(ID,map.func),
ID = NULL,
nextm = `First Transaction Date` + 90,
tenor = as.numeric(`Policy End Date` - `Policy Start Date`),
tenor = ifelse(tenor>3650,3650,tenor),
Age = ifelse(Age<0,0,ifelse(Age>120,120,Age)),
age_en = freq.encode(Age),
#  Subject_Car_Make = ifelse(Subject_Car_Make %in% c("."),"",Subject_Car_Make),
# Car_Category=ifelse(Car_Category %in% c("Mini Bus"),"Bus",
#   ifelse(Car_Category %in% c('Van','Mini Van'),"Van",
# ifelse(Car_Category %in% c("Sedan",'CAMRY CAR HIRE'),"Saloon",
#  ifelse(Car_Category %in% 'Station 4 Wheel',"Wagon",
#   ifelse(Car_Category == "Tipper Truck",'Truck',
#    ifelse(Car_Category == 'Pick Up > 3 Tons','Pick Up',Car_Category)))))),
# Car_Category = ifelse(Car_Category =="" & ProductName =='Motor Cycle',"Motorcycle",Car_Category),
# prd = ifelse(ProductName == "Muuve",1,
#  # ifelse(ProductName %in% c('Car Classic','Car Plus','CarFlex'),2,
#     ifelse(ProductName == 'CVTP',1,
#       ifelse(ProductName == "Motot Cycle",1,0))),
#  age2 = round_any(Age,10),
# age_grp = sapply(Age,group_age),
#start_year = year(ymd(`Policy Start Date`)),
start_month = month(ymd(`Policy Start Date`)),
start_qrs = quarter(ymd(`Policy Start Date`)),
start_day = day(ymd(`Policy Start Date`)),
start_day_en = freq.encode(start_day),
start_week = week(ymd(`Policy Start Date`)),
start_weekday = wday(ymd(`Policy Start Date`)),
#start_weekend = ifelse(start_weekday>5,1,0),
# year_day = yday(ymd(`Policy Start Date`)),
#  year_day_sin = sin(start_qrs *(2 * pi /4)),
# year_day_cos = cos(start_qrs *(2 * pi /4)),
#  end_year = year(ymd(`Policy End Date`)),
end_month = month(ymd(`Policy End Date`)),
end_qrs = quarter(ymd(`Policy End Date`)),
end_day = day(ymd(`Policy End Date`)),
end_weekday = wday(ymd(`Policy End Date`)),
end_week = week(ymd(`Policy End Date`))
#  end_yday = yday(ymd(`Policy End Date`))
#  prod_en =freq.encode(ProductName)
# tran_year = year(ymd(`First Transaction Date`)),
# tran_month = month(ymd(nextm)),
# tran_qtrs = quarter(ymd(nextm)),
# tran_day = day(ymd(nextm)),
# tran_week = week(ymd(nextm)),
# tran_weekday = wday(ymd(nextm))
#Days_since_lasttran=as.numeric(Sys.Date()-`First Transaction Date`)
# Gender = ifelse(Gender =="Male",1,ifelse(Gender=="Female",2,0)),
#  Car_Category = as.numeric(as.factor(Car_Category)),
# Subject_Car_Colour = as.numeric(as.factor(Subject_Car_Colour)),
#  Subject_Car_Make = as.numeric(as.factor(Subject_Car_Make)),
# LGA_Name = as.numeric(as.factor(LGA_Name)),
#  State = as.numeric(as.factor(State)),
# ProductName = as.numeric(as.factor(ProductName))
) %>%
select(-c(`Policy Start Date`,`Policy End Date`,`First Transaction Date`,nextm))
########
##
#######
#### POLICY
policy = df%>%
group_by(ProductName) %>%
summarise(pol_cnt = n(),
prod_cnt= length(unique(No_Pol)),
# prod_cnt2= sum(length(unique(PPR_PRODCD))),
mean_premium = mean(Age,na.rm = T),
min_premium = min(Age,na.rm = T),
mean_pr = mean(No_Pol,na.rm = T),
#min_prr = min(No_Pol,na.rm = T),
# mean_day = mean(start_day,na.rm = T),
#mean_day = mean(start_day,na.rm = T),
#date_cnt = length(unique(NP2_EFFECTDATE)),
#principal_cnt = length(unique(No_Pol>=6)),
# prod_64QNIHM = sum(unique(PPR_PRODCD == "PPR_PRODCD_64QNIHM")),
# sum_prem = sum(NPR_PREMIUM,na.rm = T),
family = length(unique(Car_Category)),
# family2 = mean(as.numeric(as.factor(Subject_Car_Make))),
#fa = mean(as.numeric(as.factor(Car_Category))),
# amount = mean(NLO_AMOUNT,na.rm = T),
location = length(unique(State)),
# location2 = length(unique(LGA_Name)),
#category = max(CATEGORY),
min_pr = min(tenor,na.rm = T),
min_prem = mean(tenor,na.rm = T))
#type_cnt = sum(length(unique(NLO_TYPE))),
#        occupation = max(OCCUPATION)) %>%
# mutate(location = as.numeric(as.factor(location)),
#        #category = as.numeric(as.factor(category)),
#        agent= as.numeric(as.factor(agent)),
#        type = as.numeric(as.factor(type)),
#        #occupation = as.numeric(as.factor(occupation)),
#        en = freq.encode(location))
# policy2 = df%>%
#   group_by(nn) %>%
#   summarise(
#     # prod_cnt2= sum(length(unique(PPR_PRODCD))),
#     mean_premiumc = mean(Age,na.rm = T),
#    # min_premiumc = min(Age,na.rm = T),
#    # mean_prc = mean(No_Pol,na.rm = T),
#     #location = length(unique(State)),
#     min_prc = min(tenor,na.rm = T),
#     min_premc = mean(tenor,na.rm = T))
df =df %>% left_join(policy) %>% #left_join(policy2,by="No_Pol") %>%
mutate(Gender = ifelse(Gender =="Male",1,ifelse(Gender=="Female",2,0)),
Car_Category = as.numeric(as.factor(Car_Category)),
# test = ifelse(Age==120 & No_Pol ==4 & start_month ==1 & start_day==1,1,0),
# car_en = freq.encode(Car_Category),
Subject_Car_Colour = as.numeric(as.factor(Subject_Car_Colour)),
Subject_Car_Make = as.numeric(as.factor(Subject_Car_Make)),
#sub_en = freq.encode(Subject_Car_Make),
LGA_Name = as.numeric(as.factor(LGA_Name)),
#lga_en = freq.encode(LGA_Name),
State = as.numeric(as.factor(State)),
ProductName = as.numeric(as.factor(ProductName))) %>%
#add_count(Age) %>% rename(age_cnt = n) %>%
add_count(Age,ProductName) %>% rename(age_prd_cnt = n)
#df$nn2 = my.f2cnt(df,"ProductName","Car_Category")
#a = calc_entropy(df,"ProductName","No_Pol","prd_p")
df$nn = df$No_Pol + df$ProductName
df = df %>% left_join(m)
df = cbind(df,a)
df_train = df[1:length(train.id),]
df_test = df[(length(train.id)+1):nrow(df),]
mm = df_test[,c(cat_names,cont_names)]
p= model %>% predict(mm)
summary(as.factor(p))
View(p)
summary(p)
summary(as.factor(ifelse(p>0.5,1,0)))
summary(as.factor(ifelse(p>0.3,1,0)))
summary(as.factor(ifelse(p>0.2,1,0)))
summary(as.factor(ifelse(p>0.25,1,0)))
pred= ifelse(pred>0.25,1,0)
sub = data.table(test.id,pred)
colnames(sub) = colnames(samp)
fwrite(sub,file = paste0(subm.dir,"/subm.csv"),row.names = F)
colnames(df_train)
dim(df_train)
df_train$label = label
cat_names = c('Car_Category','Subject_Car_Colour','Subject_Car_Make','LGA_Name','State','ProductName')
cont_names = colnames(df_train)[-c(4:9,43)]
procs = list(FillMissing(),Categorify(),Normalize())
dls = TabularDataTable(df_train, procs, cont_names,cat_names,
y_names = dep_var, splits = list(c(1:9000),c(9001:12079))) %>%
dataloaders(bs = 64)
model = dls %>% tabular_learner(layers=c(200,100), metrics=accuracy)
model %>% summary()
model %>% lr_find()
model %>% fastai::fit(3, lr = 0.01)
p= model %>% predict(df_test)
View(p)
summary(p)
summary(as.factor(ifelse(p>0.25,1,0)))
pred= ifelse(pred>0.25,1,0)
sub = data.table(test.id,pred)
colnames(sub) = colnames(samp)
fwrite(sub,file = paste0(subm.dir,"/subm.csv"),row.names = F)
summary(as.factor(pred))
pred= ifelse(p>0.25,1,0)
sub = data.table(test.id,pred)
colnames(sub) = colnames(samp)
fwrite(sub,file = paste0(subm.dir,"/subm.csv"),row.names = F)
summary(as.factor(pred))
